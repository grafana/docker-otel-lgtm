---
apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-collector-config
data:
  otel-collector-config.yaml: |-
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
      prometheus/collector: # needed if you use the docker-lgtm image
        config:
          scrape_configs:
            - job_name: 'opentelemetry-collector'
              static_configs:
                - targets: [ 'localhost:8888' ]
      filelog/json-logback:
        include:
          - /var/log/pods/*/*/*.log
        include_file_path: true
        operators:
          - id: container-parser
            type: container
          - id: router
            type: router
            routes:
              - output: json_parser
                expr: 'body matches "\\{[^{}]*\\}" == true'
          - id: json_parser
            type: json_parser
            on_error: drop_quiet
            body: attributes.formattedMessage
            timestamp:
              parse_from: attributes.timestamp
              layout_type: 'epoch'
              layout: 'ms'
            severity:
              parse_from: attributes.level
            trace:
              trace_id:
                parse_from: attributes.mdc.trace_id
              span_id:
                parse_from: attributes.mdc.span_id
              trace_flags:
                parse_from: attributes.mdc.trace_flags
            scope_name:
              parse_from: attributes.loggerName
          - id: move_service_namespace
            type: move
            if: 'attributes.mdc["service.namespace"] != nil'
            from: attributes.mdc["service.namespace"]
            to: resource["service.namespace"]
          - id: move_service_name
            type: move
            from: attributes.mdc["service.name"]
            to: resource["service.name"]
          - id: move_service_version
            type: move
            from: attributes.mdc["service.version"]
            to: resource["service.version"]
          - id: move_service_instance_id
            type: move
            if: 'attributes.mdc["service.instance.id"] != nil'
            from: attributes.mdc["service.instance.id"]
            to: resource["service.instance.id"]
          - id: move_deployment_environment
            type: move
            if: 'attributes.mdc["deployment.environment"] != nil'
            from: attributes.mdc["deployment.environment"]
            to: resource["deployment.environment"]
          - id: move_thread_name
            type: move
            from: attributes.threadName
            to: attributes["thread.name"]
          - id: move_throwable_class_name
            type: move
            if: "attributes.throwable?.className != nil"
            from: attributes.throwable.className
            to: attributes["exception.type"]
          - id: move_throwable_message
            type: move
            if: "attributes.throwable?.message != nil"
            from: attributes.throwable.message
            to: attributes["exception.message"]
          # FIXME "stepArray" is a json array eroding the visualization in Loki
          # [{ "className": "a.b.C", "methodName": "do", "fileName": "C.java", "lineNumber": 123},...]
          # It would help if logBack had a raw toString of the stack trace
          - id: move_throwable_stack_trace
            type: move
            if: "attributes.throwable?.stepArray != nil"
            from: attributes.throwable.stepArray
            to: attributes["exception.stacktrace"]
          - id: remove_throwable
            type: remove
            field: attributes.throwable
          - id: remove_logger_name
            type: remove
            field: attributes.loggerName
          - id: remove_timestamp
            type: remove
            field: attributes.timestamp
          - id: remove_observed_timestamp
            type: remove
            field: attributes["observed.timestamp"]
          - id: remove_level
            type: remove
            field: attributes.level
          - id: remove_detected_level
            type: remove
            field: attributes["detected.level"]
          - id: remove_mdc
            type: remove
            field: attributes.mdc
          - id: remove_context
            type: remove
            field: attributes.context
          - id: remove_formattedMessage
            type: remove
            field: attributes.formattedMessage
          - id: remove_logtag
            type: remove
            field: attributes.logtag
          - id: remove_file
            type: remove
            field: attributes["log.file.path"]
          - id: remove_filename
            type: remove
            field: attributes["log.file.name"]
          - id: remove_stream
            type: remove
            field: attributes["log.iostream"]
          - id: remove_time
            type: remove
            field: attributes.time

    processors:
      batch:
      resourcedetection:
        detectors: [ "env", "system" ]
        override: false

    exporters:
      otlphttp/metrics:
        endpoint: http://localhost:9090/api/v1/otlp
      otlphttp/traces:
        endpoint: http://localhost:4418
      otlphttp/logs:
        endpoint: http://localhost:3100/otlp
      debug/metrics:
        verbosity: detailed
      debug/traces:
        verbosity: detailed
      debug/logs:
        verbosity: detailed
      nop:

    service:
      pipelines:
        traces:
          receivers: [ otlp ]
          processors: [ batch ]
          exporters: [ otlphttp/traces ]
        metrics:
          receivers: [ otlp, prometheus/collector ]
          processors: [ batch ]
          exporters: [ otlphttp/metrics ]
        logs/otlp:
          receivers: [ otlp ]
          processors: [ batch ]
          exporters: [ otlphttp/logs ]
        logs/json-elastic:
          receivers: [ filelog/json-logback ]
          processors: [ batch ]
          exporters: [ otlphttp/logs ]
          # exporters: [ otlphttp/logs, debug/logs ]  # Uncomment this line to enable debug logging
